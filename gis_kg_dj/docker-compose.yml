version: '3.7'

services:
  pdatabase:
    image: postgis/postgis:13-3.3
    environment:
      - POSTGRES_USER=user1
      - POSTGRES_PASSWORD=1
      - POSTGRES_DB=pdb
    volumes:
      - pg_data:/var/lib/postgresql/data

  web:
    build: .
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:1111"
    ports:
      - 1111:1111
    links:
      - pdatabase:pdatabase
    volumes:
      - .:/code
    environment:
      - POSTGRES_USER=user1
      - POSTGRES_PASSWORD=1
      - POSTGRES_DB=pdb
    depends_on:
      - pdatabase

  geoserver:
    image: kartoza/geoserver
    ports:
      - 8080:8080
    environment:
      GEOSERVER_ADMIN_USER: admin
      GEOSERVER_ADMIN_PASSWORD: adminpass
#  hasura:
#    image: hasura/graphql-engine:v2.31.0
#    ports:
#      - "8080:8080"
#    depends_on:
#      data-connector-agent:
#        condition: service_healthy
#    environment:
#      HASURA_GRAPHQL_DATABASE_URL: postgres://user1:1@pdatabase:5432/pdb
#      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
#      HASURA_GRAPHQL_DEV_MODE: "true"
#      HASURA_GRAPHQL_ADMIN_SECRET: adminkey
#
#  data-connector-agent:
#    image: hasura/graphql-data-connector:v2.31.0
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
#      ## https://quarkus.io/guides/opentelemetry#configuration-reference
#      QUARKUS_OPENTELEMETRY_ENABLED: "false"
#      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health" ]
#      interval: 5s
#      timeout: 10s
#      retries: 5
#      start_period: 5s

volumes:
  pg_data:
